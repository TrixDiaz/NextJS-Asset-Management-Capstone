generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  clerkId          String           @unique
  firstName        String?
  lastName         String?
  username         String?          @unique
  email            String?          @unique
  emailVerified    DateTime?
  profileImageUrl  String?
  imageUrl         String?
  birthday         String?
  gender           String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  lastSignInAt     DateTime?
  role             String           @default("member")
  passwordEnabled  Boolean          @default(true)
  twoFactorEnabled Boolean          @default(false)
  externalId       String?
  publicMetadata   Json?            @default("{}")
  privateMetadata  Json?            @default("{}")
  unsafeMetadata   Json?            @default("{}")
  schedules        Schedule[]
  permissions      UserPermission[]
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String
  code        String           @unique
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       UserPermission[]
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
}

model Building {
  id        String   @id @default(cuid())
  name      String   @unique
  code      String?  @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  floors    Floor[]
}

model Floor {
  id         String   @id @default(cuid())
  number     Int
  name       String?
  buildingId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  building   Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  rooms      Room[]

  @@unique([buildingId, number])
}

model Room {
  id        String     @id @default(cuid())
  number    String
  name      String?
  type      RoomType   @default(CLASSROOM)
  floorId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  assets    Asset[]
  floor     Floor      @relation(fields: [floorId], references: [id], onDelete: Cascade)
  schedules Schedule[]
  tickets   Ticket[]

  @@unique([floorId, number])
}

model Asset {
  id                 String              @id @default(cuid())
  assetTag           String?             @unique
  assetType          AssetType
  systemUnit         String?
  ups                String?
  monitor            String?
  status             AssetStatus         @default(WORKING)
  remarks            String?
  roomId             String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  room               Room                @relation(fields: [roomId], references: [id])
  deploymentHistory  DeploymentRecord[]
  maintenanceHistory MaintenanceRecord[]
  tickets            Ticket[]
  assetRequests      Ticket[]            @relation("RequestedAssets")
}

model StorageItem {
  id                String             @id @default(cuid())
  name              String
  itemType          String
  subType           String?
  quantity          Int                @default(0)
  unit              String?
  remarks           String?
  serialNumbers     String[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deploymentHistory DeploymentRecord[]
}

model MaintenanceRecord {
  id          String   @id @default(cuid())
  assetId     String
  date        DateTime
  description String
  technician  String?
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  asset       Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model DeploymentRecord {
  id            String       @id @default(cuid())
  assetId       String?
  storageItemId String?
  quantity      Int          @default(1)
  serialNumber  String?
  fromRoomId    String?
  toRoomId      String?
  date          DateTime
  deployedBy    String
  remarks       String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  asset         Asset?       @relation(fields: [assetId], references: [id])
  storageItem   StorageItem? @relation(fields: [storageItemId], references: [id])
}

model Schedule {
  id          String       @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  dayOfWeek   String
  userId      String
  roomId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[]
  room        Room         @relation(fields: [roomId], references: [id])
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Ticket {
  id               String          @id @default(cuid())
  title            String
  description      String
  status           TicketStatus    @default(OPEN)
  priority         TicketPriority  @default(MEDIUM)
  ticketType       TicketType      @default(ISSUE_REPORT)
  createdById      String
  assignedToId     String?
  moderatorId      String?
  assetId          String?
  roomId           String?
  requestedAssetId String?
  startTime        DateTime?
  endTime          DateTime?
  dayOfWeek        String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  resolvedAt       DateTime?
  attachments      Attachment[]
  asset            Asset?          @relation(fields: [assetId], references: [id])
  requestedAsset   Asset?          @relation("RequestedAssets", fields: [requestedAssetId], references: [id])
  room             Room?           @relation(fields: [roomId], references: [id])
  comments         TicketComment[]
}

model Attachment {
  id         String   @id @default(cuid())
  fileName   String
  fileUrl    String
  fileType   String
  fileSize   Int
  ticketId   String
  uploadedAt DateTime @default(now())
  ticket     Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model TicketComment {
  id        String   @id @default(cuid())
  content   String
  ticketId  String
  authorId  String
  isPrivate Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
}

model Attendance {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  section     String
  yearLevel   String
  subject     String
  date        DateTime
  description String?
  systemUnit  Boolean
  keyboard    Boolean
  mouse       Boolean
  internet    Boolean
  ups         Boolean
  scheduleId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  schedule    Schedule @relation(fields: [scheduleId], references: [id])
}

enum RoomType {
  CLASSROOM
  OFFICE
  LABORATORY
  STORAGE
  OTHER
}

enum AssetType {
  COMPUTER
  PRINTER
  PROJECTOR
  NETWORK_EQUIPMENT
  OTHER
}

enum AssetStatus {
  WORKING
  NEEDS_REPAIR
  OUT_OF_SERVICE
  UNDER_MAINTENANCE
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TicketType {
  ISSUE_REPORT
  ROOM_REQUEST
  ASSET_REQUEST
}
